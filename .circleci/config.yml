version: 2.1

references:
  working_dir: &working_dir /tmp/workspace/farmsmart

  functions_dir: &functions_dir /tmp/workspace/farmsmart/functions

  rules_dir: &rules_dir /tmp/workspace/farmsmart/rules

  workspace: &workspace /tmp/workspace

  restore_workspace: &restore_workspace
    attach_workspace:
      at: *workspace

  save_workspace: &save_workspace
    persist_to_workspace:
      root: *workspace
      paths:
        - farmsmart

executors:
  gcp-firebase:
    docker:
      - image: farmsmart/gcp-firebase
    working_directory: *working_dir
  gcp-firebase-emulator:
    docker:
      - image: farmsmart/gcp-firebase-emulator
    working_directory: *working_dir
  static-analysis:
    docker:
      - image: farmsmart/static-analysis
    working_directory: *functions_dir

jobs:
  build:
    executor: gcp-firebase
    steps:
      - checkout
      - run:
          name: 'pull submodules'
          command: |
            git submodule update --init --recursive --remote

      - run:
          working_directory: *functions_dir
          name: Install dependencies for cloud function
          command: |
            npm install firebase-admin@latest firebase-functions@latest
            npm install

      - run:
          working_directory: *rules_dir
          name: Install dependencies for rules
          command: |
            npm install

      - *save_workspace
  
  static-scan:
    executor: static-analysis
    steps:
      - *restore_workspace
      - run: 
          name: Run static code analysis
          command: |
            set -euo pipefail
            # See limitations on short-lived branches
            # https://docs.sonarqube.org/latest/branches/short-lived-branches/
            sonar-scanner \
              -Dsonar.projectKey=farmsmart_$CIRCLE_PROJECT_REPONAME \
              -Dsonar.organization=farmsmart \
              -Dsonar.sources=. \
              -Dsonar.host.url=$SONAR_HOST \
              -Dsonar.login=$SONAR_LOGIN \
              -Dsonar.exclusions=test/**/*,.credentials/**/*,**/*.unit.test.js,**/*.spec.js
              #-Dsonar.branch.name=$CIRCLE_BRANCH \  
            
  credentials:
    executor: gcp-firebase
    steps:
      - *restore_workspace
      - run:
          working_directory: *working_dir
          name: Prepare credentials for integration tests
          command: |
            set -euo pipefail
            secrets_dir='.credentials'
            mkdir -p ${secrets_dir}
            echo ${TESTING_SERVICE_ACCOUNT} | base64 -di > ${secrets_dir}/testing-service-account-key.json
      - run:
          working_directory: *functions_dir
          name: Prepare credentials for spreadsheet user account
          command: |
            set -euo pipefail
            secrets_dir='.credentials'
            mkdir -p ${secrets_dir}
            echo ${SHEETS_SERVICE_ACCOUNT} | base64 -di > ${secrets_dir}/recommendations-service-account.json
      - run:
          working_directory: *working_dir
          name: Prepare env variables
          command: |
            set -euo pipefail
            echo "export FIREBASE_TOKEN=${FIREBASE_TOKEN}" >> ./env.sh
            echo "export FIREBASE_PROJECT=${FIREBASE_PROJECT}" >> ./env.sh
            echo "export SHEETS_API_KEY=${SHEETS_API_KEY}" >> ./env.sh
            echo "export SCORE_DOC_ID=${SCORE_DOC_ID}" >> ./env.sh
            echo "export SLACK_FARMSMART_TOKEN=${SLACK_FARMSMART_TOKEN}" >> ./env.sh
            echo "export BULKUPLOAD_URL=${BULKUPLOAD_URL}" >> ./env.sh

            echo "export GOOGLE_APPLICATION_CREDENTIALS=/tmp/workspace/farmsmart/functions/.credentials/testing-service-account.json" >> ./env.sh

      - *save_workspace

  test-functions:
    executor: gcp-firebase
    steps:
      - *restore_workspace
      - run:
          working_directory: *functions_dir
          name: Run unit tests on cloud functions
          command: |
            npm run-script lint
            npm run-script test:ci
      - run:
          working_directory: *working_dir
          name: Upload coverage report to codecov
          command: |
            ./functions/node_modules/.bin/codecov --token="$CODECOV_TOKEN"
      - store_test_results: 
          path: /tmp/workspace/farmsmart/functions/reports
      - *save_workspace

  test-functions-integration:
    executor: gcp-firebase-emulator
    steps:
      - *restore_workspace
      - run:
          working_directory: *working_dir
          name: Inject testing credentials used by the emulated tests
          command: |
            cp ./.credentials/testing-service-account-key.json ./functions/.credentials/
      - run: 
          name: Start firestore emulator in the background
          background: true
          command: |
            firebase serve --only firestore
      - run:
          working_directory: *functions_dir
          name: Run integration tests on cloud functions
          command: |
            set -euo pipefail
            sleep 5
            npm run test:spec

  test-rules:
    executor: gcp-firebase-emulator
    steps:
      - *restore_workspace
      - run: 
          name: Start firestore emulator in the background
          background: true
          command: |
            firebase serve --only firestore
      - run:
          working_directory: *rules_dir
          name: Run rules unit test 
          command: |
            sleep 5
            npm run-script test 

  deploy:
    executor: gcp-firebase
    steps:
      - *restore_workspace
      - run:
          working_directory: *working_dir
          name: Deploy to firebase project
          command: |
            source ./env.sh
            set -euo pipefail
            echo "Set firebase project cloud function configs"

            firebase functions:config:set --token $FIREBASE_TOKEN --project $FIREBASE_PROJECT farmsmart.sheets.api.key=${SHEETS_API_KEY}
            firebase functions:config:set --token $FIREBASE_TOKEN --project $FIREBASE_PROJECT farmsmart.scorematrix.doc.id=${SCORE_DOC_ID}
            firebase functions:config:set --token $FIREBASE_TOKEN --project $FIREBASE_PROJECT farmsmart.slack.api.token=${SLACK_FARMSMART_TOKEN}

            echo "Deploy all FireBase artifacts (cloud functions, rules, hosting)"

            firebase deploy --token $FIREBASE_TOKEN --project $FIREBASE_PROJECT --force

  verify-deployment:
    executor: gcp-firebase
    steps:
      - *restore_workspace
      - run:
          working_directory: *working_dir
          name: Verify that deployment is successful
          command: |
            source ./env.sh
            set -euo pipefail

            curl --silent "https://us-central1-${FIREBASE_PROJECT}.cloudfunctions.net/httpsOnRequestBulkUploadScoreMatrix?sheetId=${SCORE_DOC_ID}" | grep -v FAILED

workflows:
  backend:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/

      - credentials:
          name: prepare-feature
          context: gcp-feature
          requires:
            - build
          filters:
            branches:
              only:
                - /feature.*/

      - credentials:
          name: prepare-test-tag
          context: gcp-feature
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^test.*/

      - credentials:
          name: prepare-develop
          context: gcp-dev
          requires:
            - build
          filters:
            branches:
              only:
                - develop
      
      - credentials:
          name: prepare-stage
          context: gcp-stage
          requires:
            - build
          filters:
            branches:
              only:
                - /release.*/

      - credentials:
          name: prepare-prod
          context: gcp-prod
          requires:
            - build
          filters:
            branches:
              only:
                - master

      # Release deployments will only run for tags eg.: v1
      - credentials:
          name: prepare-release-tag
          context: gcp-prod
          requires:
            - build
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/

      - test-functions:
          requires:
            - prepare-feature
            - prepare-test-tag
            - prepare-develop
            - prepare-stage
            - prepare-release-tag
            - prepare-prod
          filters:
            tags:
              only: /.*/

      - static-scan:
          context: sonar
          requires:
            - test-functions

      - test-rules:
          requires:
            - prepare-feature
            - prepare-test-tag
            - prepare-develop
            - prepare-stage
            - prepare-release-tag
            - prepare-prod
          filters:
            tags:
              only: /.*/

      - test-functions-integration:
          requires:
            - prepare-feature
            - prepare-test-tag
            - prepare-develop
            - prepare-stage
            - prepare-release-tag
            - prepare-prod
          filters:
            tags:
              only: /.*/

      # All cloud deployments for release require a manual approval
      - approval:
          type: approval
          requires:
            - prepare-release-tag
            - prepare-prod
          filters:
            tags:
              only: /.*/

      - deploy:
          # Deploys feature branches to gcp project
          requires:
            - test-functions
            - test-functions-integration
            - test-rules
            - approval
          filters:
            tags:
              only: /.*/

      # Smoke testing
      - verify-deployment:
          requires:
            - deploy
          filters:
            tags:
              only: /.*/

      
